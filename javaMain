package thewhispererincgmail.phonejobnumbers;

import android.os.Bundle;
import android.support.v7.app.AppCompatActivity;
import android.util.Log;
import android.widget.ArrayAdapter;
import android.widget.ListView;

import com.google.android.gms.appindexing.AppIndex;
import com.google.android.gms.common.api.GoogleApiClient;
import com.google.firebase.database.ChildEventListener;
import com.google.firebase.database.DataSnapshot;
import com.google.firebase.database.DatabaseError;
import com.google.firebase.database.DatabaseReference;
import com.google.firebase.database.FirebaseDatabase;
import com.google.firebase.database.ValueEventListener;

public class JobNumberList extends AppCompatActivity {

    /**
     * ATTENTION: This was auto-generated to implement the App Indexing API.
     * See https://g.co/AppIndexing/AndroidStudio for more information.
     */
    private GoogleApiClient client;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_job_number_list);

        // Get ListView object from xml
        final ListView listView = (ListView) findViewById(R.id.listView);

        // Create a new Adapter
        final ArrayAdapter<String> adapter = new ArrayAdapter<>(this,
                android.R.layout.simple_list_item_1, android.R.id.text1);

        // Assign adapter to ListView
        listView.setAdapter(adapter);

        // Connect to the Firebase database

        FirebaseDatabase database = FirebaseDatabase.getInstance();
        //database.setPersistenceEnabled(true);

        // Get a reference to the todoItems child items it the database
        final DatabaseReference myRef = database.getReference("todoItems");

        // Assign a listener to detect changes to the child items
        // of the database reference.
        myRef.addChildEventListener(new ChildEventListener() {

            // This function is called once for each child that exists
            // when the listener is added. Then it is called
            // each time a new child is added.
            @Override
            public void onChildAdded(DataSnapshot dataSnapshot, String previousChildName) {
                String value = dataSnapshot.child("name").getValue(String.class);
                adapter.add(dataSnapshot.getKey().toString() +": " + value);
            }

            // This function is called each time a child item is removed.
            public void onChildRemoved(DataSnapshot dataSnapshot) {
                String value = dataSnapshot.child("name").getValue(String.class);
                adapter.remove(value);
            }

            // The following functions are also required in ChildEventListener implementations.
            public void onChildChanged(final DataSnapshot dataSnapshot, final String previousChildName) {

                if(previousChildName != null) {
                    myRef.child(previousChildName).addListenerForSingleValueEvent(new ValueEventListener() {
                        @Override
                        public void onDataChange(DataSnapshot dataSnapshot2) {
                            //System.out.println("previous childname: "+ dataSnapshot.getValue());
                            int spot = adapter.getPosition(dataSnapshot2.getKey().toString() + ": " + dataSnapshot2.child("name").getValue().toString()) + 1;
                            System.out.println("spot: " + spot);
                            String oldData = adapter.getItem(spot);
                            adapter.remove(oldData);
                            //System.out.println("new data: " + dataSnapshot.child("name").getValue(String.class));

                            adapter.insert(dataSnapshot.getKey().toString() + ": " + dataSnapshot.child("name").getValue(String.class), spot);
                        }

                        @Override
                        public void onCancelled(DatabaseError databaseError) {

                        }
                    });
                }
                else
                {
                    int spot = 0;
                    String oldData = adapter.getItem(spot);
                    adapter.remove(oldData);
                    //System.out.println("new data: " + dataSnapshot.child("name").getValue(String.class));

                    adapter.insert(dataSnapshot.getKey().toString() + ": " + dataSnapshot.child("name").getValue(String.class), spot);

                }
                //adapter.add(dataSnapshot.child("name").getValue(String.class));
                //System.out.println("previouschildName: " + previousChildName);
                //System.out.println("datasnapshot: " + dataSnapshot.child("name").getValue(String.class));


            }

            public void onChildMoved(DataSnapshot dataSnapshot, String previousChildName) {
            }

            @Override
            public void onCancelled(DatabaseError error) {
                // Failed to read value
                Log.w("TAG:", "Failed to read value.", error.toException());
            }
        });


        // ATTENTION: This was auto-generated to implement the App Indexing API.
        // See https://g.co/AppIndexing/AndroidStudio for more information.
        client = new GoogleApiClient.Builder(this).addApi(AppIndex.API).build();
    }

}
